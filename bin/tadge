#!/usr/bin/python

import sys, json, argparse, re
from lxml import etree
from lxml.cssselect import CSSSelector

def process_row_list(row):
    return [html.xpath("string()").strip() for html in row]

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--expression", "-e", help="CSS selector query", type=str)
parser.add_argument("--numbers", "-n", help="Give a list of numbers (like '4,5') of cells to take from each row")
parser.add_argument("--plain-text-output", "-c", help="Output plain text (CSV) output with the given separator", nargs="?", const=",", default=None, metavar="separator")
parser.add_argument("--no-number-processing", help="Turn off number formatting, where commas are stripped from number strings", action="store_true")
parser.add_argument("--skip-first", "-f", help="Skip outputting first row; helpful for tables that include a header", action="store_true")
parser.add_argument("--skip-nonfull-rows", "-s", help="Skip rows where selected data is empty", action="store_true")
parser.add_argument("field", help="Field in output structure", type=str, nargs='*')
parser.add_argument("--input-separator", "-i", help="Field separator for plain-text input", type=str, default=" ")
opts = parser.parse_args(sys.argv[1:])

if opts.expression:
    sel = CSSSelector(opts.expression)
    parser = etree.HTMLParser()
    doc = etree.parse(sys.stdin, parser)
    table = sel(doc) 
    data = [ process_row_list(row) for row in table ]
else:
    data = [line.strip().split(opts.input_separator) for line in sys.stdin]

numbers = None
if opts.numbers:
    numbers = map(int, opts.numbers.split(','))
elif opts.field:
    numbers = range(len(opts.field))
if numbers:
    new_row = lambda row: [ d for i, d in enumerate(row) if i in numbers ]
    data = [ new_row(row) for row in data ]

if not opts.no_number_processing:
    for row in data:
        for i,d in enumerate(row):
            if re.match("^[0-9,]+$", d):
                row[i] = d.replace(',','')

if opts.skip_nonfull_rows: 
    data = [row for row in data if all(row)]

if opts.skip_first:
    data = data[1:]

if opts.field:
    new_data = []
    for row in data:
        d = dict()
        for i,f in enumerate(opts.field):
            d[f] = row[i]
        new_data.append(d)
    data = new_data


if opts.plain_text_output:
    for row in data:
        line = row.values() if opts.field else row
        print opts.plain_text_output.join(line)
else:
    json.dump(data, sys.stdout)

